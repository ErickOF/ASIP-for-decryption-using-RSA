# Reading C:/intelFPGA/18.0/modelsim_ase/tcl/vsim/pref.tcl
# do asip_run_msim_rtl_verilog.do
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim - Intel FPGA Edition vmap 10.5b Lib Mapping Utility 2016.10 Oct  5 2016
# vmap work rtl_work 
# Copying C:/intelFPGA/18.0/modelsim_ase/win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# 
# vlog -sv -work work +incdir+C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage {C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage/mem_stage_test.sv}
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 14:39:04 on Jul 15,2020
# vlog -reportprogress 300 -sv -work work "+incdir+C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage" C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage/mem_stage_test.sv 
# -- Compiling module mem_stage_test
# 
# Top level modules:
# 	mem_stage_test
# End time: 14:39:04 on Jul 15,2020, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -sv -work work +incdir+C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage {C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage/mem_stage.sv}
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 14:39:05 on Jul 15,2020
# vlog -reportprogress 300 -sv -work work "+incdir+C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage" C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage/mem_stage.sv 
# -- Compiling module mem_stage
# 
# Top level modules:
# 	mem_stage
# End time: 14:39:05 on Jul 15,2020, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -sv -work work +incdir+C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage {C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage/data_memory.sv}
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 14:39:05 on Jul 15,2020
# vlog -reportprogress 300 -sv -work work "+incdir+C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage" C:/Users/erick/Documents/Git/ASIP-for-decryption-using-RSA/asip/asip/processor/path/mem-stage/data_memory.sv 
# -- Compiling module data_memory
# 
# Top level modules:
# 	data_memory
# End time: 14:39:05 on Jul 15,2020, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
vsim work.mem_stage_test
# vsim work.mem_stage_test 
# Start time: 14:39:07 on Jul 15,2020
# Loading sv_std.std
# Loading work.mem_stage_test
# Loading work.mem_stage
# Loading work.data_memory
add wave -position end  sim:/mem_stage_test/address
add wave -position end  sim:/mem_stage_test/write_data
add wave -position end  sim:/mem_stage_test/read_data
add wave -position end  sim:/mem_stage_test/clk
add wave -position end  sim:/mem_stage_test/write_enable
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
#           File in use by: erick  Hostname: DESKTOP-4PN9CM5  ProcessID: 12636
#           Attempting to use alternate WLF file "./wlftia2n8h".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
#           Using alternate file: ./wlftia2n8h
add wave -position end  sim:/mem_stage_test/DUT/we0
add wave -position end  sim:/mem_stage_test/DUT/we1
add wave -position end  sim:/mem_stage_test/DUT/we2
add wave -position end  sim:/mem_stage_test/DUT/we3
run 800
# Read memory 0
# clk=1, write_enable=0, address=00000000, write_data=00000005, read_data=00000006
# 
# clk=0, write_enable=0, address=00000000, write_data=00000005, read_data=00000006
# 
# clk=1, write_enable=0, address=00000004, write_data=00000005, read_data=00000031
# 
# clk=0, write_enable=0, address=00000004, write_data=00000005, read_data=00000031
# 
# clk=1, write_enable=0, address=00000008, write_data=00000009, read_data=00000005
# 
# clk=0, write_enable=0, address=00000008, write_data=00000009, read_data=00000005
# 
# Read memory 1
# clk=1, write_enable=0, address=00010000, write_data=00000005, read_data=00000006
# 
# clk=0, write_enable=0, address=00010000, write_data=00000005, read_data=00000006
# 
# clk=1, write_enable=0, address=00010004, write_data=00000005, read_data=00000031
# 
# clk=0, write_enable=0, address=00010004, write_data=00000005, read_data=00000031
# 
# clk=1, write_enable=0, address=00010008, write_data=00000009, read_data=00000005
# 
# clk=0, write_enable=0, address=00010008, write_data=00000009, read_data=00000005
# 
# Read memory 2
# clk=1, write_enable=0, address=00020000, write_data=00000005, read_data=00000006
# 
# clk=0, write_enable=0, address=00020000, write_data=00000005, read_data=00000006
# 
# clk=1, write_enable=0, address=00020004, write_data=00000005, read_data=00000031
# 
# clk=0, write_enable=0, address=00020004, write_data=00000005, read_data=00000031
# 
# clk=1, write_enable=0, address=00020008, write_data=00000009, read_data=00000005
# 
# clk=0, write_enable=0, address=00020008, write_data=00000009, read_data=00000005
# 
# Read memory 3
# clk=1, write_enable=0, address=00030000, write_data=00000005, read_data=00000006
# 
# clk=0, write_enable=0, address=00030000, write_data=00000005, read_data=00000006
# 
# clk=1, write_enable=0, address=00030004, write_data=00000005, read_data=00000031
# 
# clk=0, write_enable=0, address=00030004, write_data=00000005, read_data=00000031
# 
# clk=1, write_enable=0, address=00030008, write_data=00000009, read_data=00000005
# 
# clk=0, write_enable=0, address=00030008, write_data=00000009, read_data=00000005
# 
# Write into memory 0
# clk=1, write_enable=1, address=00000000, write_data=00000010, read_data=00000010
# 
# clk=0, write_enable=1, address=00000000, write_data=00000010, read_data=00000010
# 
# clk=1, write_enable=1, address=00000004, write_data=00000011, read_data=00000011
# 
# clk=0, write_enable=1, address=00000004, write_data=00000011, read_data=00000011
# 
# clk=1, write_enable=1, address=00000008, write_data=00000012, read_data=00000012
# 
# clk=0, write_enable=1, address=00000008, write_data=00000012, read_data=00000012
# 
# Write into memory 1
# clk=1, write_enable=1, address=00010000, write_data=00010024, read_data=00000024
# 
# clk=0, write_enable=1, address=00010000, write_data=00010024, read_data=00000024
# 
# clk=1, write_enable=1, address=00010004, write_data=00010007, read_data=00000007
# 
# clk=0, write_enable=1, address=00010004, write_data=00010007, read_data=00000007
# 
# clk=1, write_enable=1, address=00010008, write_data=00010009, read_data=00000009
# 
# clk=0, write_enable=1, address=00010008, write_data=00010009, read_data=00000009
# 
# Write into memory 2
# clk=1, write_enable=1, address=00020000, write_data=00020024, read_data=00000024
# 
# clk=0, write_enable=1, address=00020000, write_data=00020024, read_data=00000024
# 
# clk=1, write_enable=1, address=00020004, write_data=00020007, read_data=00000007
# 
# clk=0, write_enable=1, address=00020004, write_data=00020007, read_data=00000007
# 
# clk=1, write_enable=1, address=00020008, write_data=00020009, read_data=00000009
# 
# clk=0, write_enable=1, address=00020008, write_data=00020009, read_data=00000009
# 
# Write into memory 3
# clk=1, write_enable=1, address=00030000, write_data=00030012, read_data=00000012
# 
# clk=0, write_enable=1, address=00030000, write_data=00030012, read_data=00000012
# 
# clk=1, write_enable=1, address=00030004, write_data=00030018, read_data=00000018
# 
# clk=0, write_enable=1, address=00030004, write_data=00030018, read_data=00000018
# 
# clk=1, write_enable=1, address=00030008, write_data=00030032, read_data=00000032
# 
# clk=0, write_enable=1, address=00030008, write_data=00030032, read_data=00000032
# 
# Read memory 0
# clk=1, write_enable=0, address=00000000, write_data=00000005, read_data=00000010
# 
# clk=0, write_enable=0, address=00000000, write_data=00000005, read_data=00000010
# 
# clk=1, write_enable=0, address=00000004, write_data=00000005, read_data=00000011
# 
# clk=0, write_enable=0, address=00000004, write_data=00000005, read_data=00000011
# 
# clk=1, write_enable=0, address=00000008, write_data=00000009, read_data=00000012
# 
# clk=0, write_enable=0, address=00000008, write_data=00000009, read_data=00000012
# 
# Read memory 1
# clk=1, write_enable=0, address=00010000, write_data=00000005, read_data=00000024
# 
# clk=0, write_enable=0, address=00010000, write_data=00000005, read_data=00000024
# 
# clk=1, write_enable=0, address=00010004, write_data=00000005, read_data=00000007
# 
# clk=0, write_enable=0, address=00010004, write_data=00000005, read_data=00000007
# 
# clk=1, write_enable=0, address=00010008, write_data=00000009, read_data=00000009
# 
# clk=0, write_enable=0, address=00010008, write_data=00000009, read_data=00000009
# 
# Read memory 2
# clk=1, write_enable=0, address=00020000, write_data=00000005, read_data=00000024
# 
# clk=0, write_enable=0, address=00020000, write_data=00000005, read_data=00000024
# 
# clk=1, write_enable=0, address=00020004, write_data=00000005, read_data=00000007
# 
# clk=0, write_enable=0, address=00020004, write_data=00000005, read_data=00000007
# 
# clk=1, write_enable=0, address=00020008, write_data=00000009, read_data=00000009
# 
# clk=0, write_enable=0, address=00020008, write_data=00000009, read_data=00000009
# 
# Read memory 3
# clk=1, write_enable=0, address=00030000, write_data=00000005, read_data=00000012
# 
# clk=0, write_enable=0, address=00030000, write_data=00000005, read_data=00000012
# 
# clk=1, write_enable=0, address=00030004, write_data=00000005, read_data=00000018
# 
# clk=0, write_enable=0, address=00030004, write_data=00000005, read_data=00000018
# 
# clk=1, write_enable=0, address=00030008, write_data=00000009, read_data=00000032
# 
# clk=0, write_enable=0, address=00030008, write_data=00000009, read_data=00000032
# 
# A time value could not be extracted from the current line
# A time value could not be extracted from the current line
# End time: 14:56:58 on Jul 15,2020, Elapsed time: 0:17:51
# Errors: 0, Warnings: 2
